import { useState, useRef, useEffect } from 'react';

function useDelayedState(initialState) {
  var _useState = useState(initialState),
      state = _useState[0],
      setState = _useState[1];

  var timeoutRef = useRef();

  var setStateAfter = function setStateAfter(newState, delay) {
    if (delay === 0 || delay === undefined) {
      setState(newState);
    } else {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      timeoutRef.current = setTimeout(function () {
        setState(newState);
        timeoutRef.current = null;
      }, delay);
    }
  };

  var cancelSetState = function cancelSetState() {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  useEffect(function () {
    return function () {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, []);
  return [state, setStateAfter, cancelSetState];
}

export default useDelayedState;
//# sourceMappingURL=index.modern.js.map
